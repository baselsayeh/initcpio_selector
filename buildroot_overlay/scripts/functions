#!/bin/sh

__msg() {
    echo "$*"
}
_msg() {
    ! (echo "$quiet" | grep -q -E "[Yy1]") && __msg "$*"
}
fatal() {
    __msg "[F] $*"
    sleep 5
    exit 1
}
error() {
    __msg "[E] $*"
    sleep 5
}
warn() {
    _msg "[W] $*"
}
info() {
    _msg "[I] $*"
}

load_cmdline_to_vars() {
    TEMPFILE=$(mktemp)
    #load linux vars
    #needed mainly for root

    #The extra space will make sure that read does not fail at the last param
    { cat "$1"; echo -ne " "; } | while read -r -d " " p; do
            [ -z "$p" ] && continue
            echo -ne "$p" | grep -q "\."
            [ $? -eq 0 ] && continue
            echo "export \"$p\"" >> "$TEMPFILE"
    done
    . "$TEMPFILE"
    rm -f "$TEMPFILE"
}

__resolve_uuid_to_block() {
    #Get the uuid
    UUID="$1"

    #BLKSUUIDS=$(blkid | sed -n 's/\/dev\/\(.*\): .*UUID=\"\([^\"]*\)\".*/\1|\2/p')
    BLKSUUIDS=$(blkid | sed -n 's/\(.*\): .*UUID=\"\([^\"]*\)\".*/\1|\2/p')
    echo "$BLKSUUIDS" | while read -r p || [ -n "$p" ]; do
        BLKPATH=$(echo -ne "$p" | cut -d "|" -f 1)
        BLKUUID=$(echo -ne "$p" | cut -d "|" -f 2)
        if [ "$BLKUUID" = "$UUID" ]; then
            echo -ne "$BLKPATH"
            return
        fi
    done

    #return 1
}
__resolve_label_to_block() {
    #Get the label without LABEL=
    LABEL="$1"

    #BLKSUUIDS=$(blkid | sed -n 's/\/dev\/\(.*\): .*UUID=\"\([^\"]*\)\".*/\1|\2/p')
    BLKSLABELS=$(blkid | sed -n 's/\(.*\): .*LABEL=\"\([^\"]*\)\".*/\1|\2/p')
    echo "$BLKSLABELS" | while read -r p || [ -n "$p" ]; do
        BLKPATH=$(echo -ne "$p" | cut -d "|" -f 1)
        BLKLABEL=$(echo -ne "$p" | cut -d "|" -f 2)
        if [ "$BLKLABEL" = "$LABEL" ]; then
            echo -ne "$BLKPATH"
            return
        fi
    done

    #return 1
}

__wait_and_mount() {
    ROOT="$1"
    MNTPOINT="$2"
    MAXCOUNT=$3

    COUNT=0

    #TODO: Maybe check for PART UUID
    RESOLVER=
    if `echo "$ROOT" | grep -iq "UUID="`; then
        info "UUID detected, will try to resolve to block"
        OLDROOT=$(echo -ne "$ROOT" | sed -e s/^[Uu][Uu][Ii][Dd]=//)

        RESOLVER=__resolve_uuid_to_block
    elif `echo "$ROOT" | grep -iq "LABEL="`; then
        info "LABEL detected, will try to resolve to block"
        OLDROOT=$(echo -ne "$ROOT" | sed -e s/^[Ll][Aa][Bb][Ee][Ll]=//)

        RESOLVER=__resolve_label_to_block
    fi

    while true; do
        if [ ! -z "$RESOLVER" ]; then
            NEWROOT=$($RESOLVER "$OLDROOT")
            if [ -z "$NEWROOT" ]; then
                warn "Unable to resolve $ROOT"
            else
                info "Resolved $OLDROOT to $NEWROOT"
                ROOT="$NEWROOT"
            fi
        fi

        mount -o ro "$ROOT" "$MNTPOINT"
        RET=$?
        if [ "$RET" -ne 0 ] && [ $COUNT -lt $MAXCOUNT ]; then
            info "Waiting for $ROOT ..."
            sleep 10
            COUNT=$((COUNT + 1))
            continue
        fi
        [ "$RET" -eq 0 ] && break

        return 1
    done

    return 0
}

__try_to_extract_cpio() {
    FILE="$1"
    OUT="$2"

    TYPE=$(file -b --mime-type "$FILE" | cut -d ";" -f1 | tr '[:upper:]' '[:lower:]')
    if [ "$TYPE" = "application/zstd" ]; then
        zstd -dc "$FILE" | cpio -idm --no-preserve-owner -D "$OUT"
    elif [ "$TYPE" = "application/x-xz" ]; then
        xz -dc "$FILE" | cpio -idm --no-preserve-owner -D "$OUT"
    elif [ "$TYPE" = "application/gzip" ]; then
        gzip -dc "$FILE" | cpio -idm --no-preserve-owner -D "$OUT"
    elif [ "$TYPE" = "application/x-cpio" ]; then
        cat "$FILE" | cpio -idm --no-preserve-owner -D "$OUT"
    else
        error "Unknown init format: $TYPE, output from file: $(file $FILE)"
        return 1
    fi

    return 0
}
